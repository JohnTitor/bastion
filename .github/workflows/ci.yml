name: CI

on: [push, pull_request]

jobs:
  build_and_test:
    name: ${{ matrix.version }} - Build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        version: [stable, nightly]
        target: [i686-pc-windows-msvc, x86_64-pc-windows-gnu, x86_64-pc-windows-msvc]

    steps:
      - uses: actions/checkout@master

      - name: Install ${{ matrix.version }} on ${{ matrix.target }}
        if: matrix.os == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.version }}
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      - name: Install ${{ matrix.version }}
        if: matrix.os != 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.version }}
          override: true

      - name: Check rustc
        if: matrix.os == 'windows-latest'
        run: |
          rustup default ${{ matrix.version }}-${{ matrix.target }}
          rustc -vV

      - name: check nightly
        if: matrix.version == 'nightly'
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --benches --bins --examples --tests

      - name: check stable
        if: matrix.version == 'stable'
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  check_fmt_and_docs:
    name: Checking fmt and docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: setup
        run: |
          rustup default stable
          rustup component add rustfmt
          rustc --version
      - name: fmt
        run: cargo fmt --all -- --check

      - name: Docs
        run: cargo doc
